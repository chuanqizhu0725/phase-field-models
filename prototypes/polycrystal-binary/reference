//データを読み込みNo.1-5
//粒番号は1-5
//界面エネルギー密度に方位差依存性を考慮（できるがしていない）
//濃度場も考慮（２次式）、β相の結晶粒は１個 No.5

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include "wingxa.h"

#define DRND(x) ((double)(x) / RAND_MAX * rand()) //乱数の設定

#define ND 100   //差分計算における計算領域一辺の分割数
#define N 6      //考慮する結晶方位の数＋１
#define INXY 400 //描画window１辺のピクセルサイズ

int nd = ND, ndm = ND - 1;            //計算領域の一辺の差分分割数(差分ブロック数), ND-1を定義
int nm = N - 1, nmm = N - 2;          //考慮する結晶方位の数、N-2（考慮する結晶方位の数－１）を定義
double PI = 3.141592, time1;          //π、計算カウント数
double RR = 8.3145;                   //ガス定数
double ph[N][ND][ND], ph2[N][ND][ND]; //フェーズフィールド、フェーズフィールド補助配列
double c0;                            //平均組成
double ch[ND][ND], ch2[ND][ND];       //濃度場、濃度場の補助配列
double aij[N][N];                     //勾配エネルギー係数
double wij[N][N];                     //ペナルティー項の係数
double tij[N][N];                     //粒界の易動度
double eij[N][N];                     //粒界移動の駆動力
int m00h[N][ND][ND];                  //位置(i,j)およびその周囲(i±1,j±1)において、pが０ではない方位の番号
int n00h[ND][ND];                     //位置(i,j)およびその周囲(i±1,j±1)において、pが０ではない方位の個数

void ini000();  //初期場の設定サブルーチン
void graph_a(); //グラフ描画サブルーチン（フェーズフィールド）
void graph_c(); //グラフ描画サブルーチン（濃度場）
void datsave(); //データ保存サブルーチン
void datin();   //データ入力サブルーチン

//******* メインプログラム ******************************************
int main(void)
{
    int i, j, k, l, ii, jj, kk, ll, it; //整数
    int ip, im, jp, jm;                 //整数
    int n1, n2, n3;                     //整数
    int nalph;
    int n00; //位置(i,j)およびその周囲(i±1,j±1)において、pが０ではない方位の個数
    // int n000;//位置(i,j)において、pが０ではない方位の個数（n00>=n000）
    double cah[ND][ND], cbh[ND][ND]; //局所平衡（平行接線則）の濃度場
    double sah[ND][ND], sbh[ND][ND]; //α相とβ相の存在確率（SαとSβ）
    double time1max;                 //計算カウント数の最大値（計算終了カウント）
    double delt, L, b1;              //時間きざみ、計算領域１辺の長さ、差分ブロック一辺の長さ
    double M1;                       //粒界の易動度
    double W1;                       //ペナルティー項の係数
    double K1;                       //勾配エネルギー係数
    double E1;                       //粒界移動の駆動力
    double temp;                     //温度
    double sum1, sum2, sum3;         //各種の和の作業変数
    double pddtt;                    //フェーズフィールドの時間変化率

    double gamma; //粒界エネルギ密度
    double delta; //粒界幅（差分ブロック数にて表現）
    double amobi; //粒界の易動度
    double vm0;   //モル体積

    double A_alph, A_beta, c_alph0, c_beta0; //化学的自由エネルギー内のパラメータ
    double c, sa, sb, Da, Db, D;             //濃度場、Sα、Sβ、拡散係数（Dα、Dβ）、重み付拡散係数D
    double gii, gjj, cii, cjj;               //化学的自由エネルギー、局所平衡濃度
    double dgdc;                             //化学的自由エネルギーの濃度微分
    double cddtt;                            //濃度の変化率
    double dc0;                              //濃度場補正用の作業変数
    double dev1_a, dev1_b, dev2_a, dev2_b;   //拡散方程式内における微分計算の際の作業変数

    //****** 計算条件および物質定数の設定 ****************************************

    printf("delt(0.2)=  ");
    scanf(" %lf", &delt); //時間刻みの入力
                          //	delt=0.2;

    // printf("c0(0.4)=  "); scanf(" %lf",&c0);//平均組成の入力
    // c0=0.2;

    temp = 1000.0;                //温度(K)
    L = 2000.0;                   //計算領域の一辺の長さ(nm)
    b1 = L / (double)ND * 1.0e-9; //差分プロック１辺の長さ(m)

    vm0 = 7.0e-6;                       //モル体積
    gamma = 0.5 * vm0 / RR / temp / b1; //粒界エネルギ密度（0.5J/m^2）を無次元化
    delta = 5.0;                        //粒界幅（差分ブロック数にて表現）

    K1 = 8.0 * delta * gamma / PI / PI; //勾配エネルギー係数[式(3.23)]
    W1 = 4.0 * gamma / delta;           //ペナルティー項の係数[式(3.23)]
    amobi = 1.;
    M1 = amobi * PI * PI / (8.0 * delta); //粒界の易動度[式(3.23)]
    E1 = 50.0 / RR / temp;                //粒界移動の駆動力

    time1 = 0.;
    time1max = 10000001.; //計算カウント数の初期値と最大値

    nalph = 4; //α相の結晶方位の数（考慮しているα相の結晶粒の数）
    A_alph = 1.0e+02 / RR / temp;
    c_alph0 = 0.1; //化学的自由エネルギー内のパラメータ
    A_beta = 1.0e+02 / RR / temp;
    c_beta0 = 0.9;
    Da = Db = D = 1.0; //各相の拡散係数は全て等しいと仮定

    //*** 式(4.36)-式(4.39)の配列（K,W,M,E）の設定 **************************
    for (i = 1; i <= nm; i++)
    {
        for (j = i + 1; j <= nm; j++)
        {
            wij[i][j] = wij[j][i] = W1;
            aij[i][j] = aij[j][i] = K1;
            tij[i][j] = tij[j][i] = M1;
            eij[i][j] = eij[j][i] = 0.0;
        }
        wij[i][i] = 0.0;
        aij[i][i] = 0.0;
        tij[i][i] = 0.0;
        eij[i][i] = 0.0;
    }

    //*** 初期場の設定と描画Window表示 *****************************************
    for (i = 0; i <= ndm; i++)
    {
        for (j = 0; j <= ndm; j++)
        {
            for (k = 1; k <= nm; k++)
            {
                ph[k][i][j] = 0.0;
                ph2[k][i][j] = 0.0; //フェーズフィールド、および補助配列の初期化
            }
            ch[i][j] = 0.0;
            ch2[i][j] = 0.0; //濃度場、および補助配列の初期化
        }
    }

    ini000(); //初期場の設定
              // datin();//初期場の入力
    gwinsize(INXY, INXY);
    ginit(2);
    gsetorg(0, 0); //描画Window表示

//**** シミュレーションスタート ******************************
start:;

    // if((((int)(time1) % 200)==0)) {datsave();}//一定繰返しカウント毎に場を保存
    // if(time1==200.) {datsave();}//特定の時間の場を保存
    if ((((int)(time1) % 100) == 0))
    {
        graph_a();
    } //一定繰返しカウント毎にフェーズフィールド表示
    // if((((int)(time1) % 100)==0)){ graph_c(); }	//一定繰返しカウント毎に濃度場表示

    //******  局所平衡組成（cαとcβ）の計算[式(4.47)]  ********************************
    for (i = 0; i <= ndm; i++)
    {
        for (j = 0; j <= ndm; j++)
        {
            c = ch[i][j]; //濃度場
            sum1 = 0.0;
            for (ii = 1; ii <= nalph; ii++)
            {
                sum1 += ph[ii][i][j];
            }
            sa = sah[i][j] = sum1; // Sαの計算[式(4.46)]
            sum1 = 0.0;
            for (ii = nalph + 1; ii <= nm; ii++)
            {
                sum1 += ph[ii][i][j];
            }
            sb = sbh[i][j] = sum1; // Sβの計算[式(4.46)]

            //局所平衡組成の計算[式(4.47)]
            cah[i][j] = (A_beta * c + (A_alph * c_alph0 - A_beta * c_beta0) * sb) / (A_beta * sa + A_alph * sb);
            cbh[i][j] = (A_alph * c + (A_beta * c_beta0 - A_alph * c_alph0) * sa) / (A_beta * sa + A_alph * sb);
            if (cah[i][j] >= 1.0)
            {
                cah[i][j] = 1.0;
            }
            if (cah[i][j] <= 0.0)
            {
                cah[i][j] = 0.0;
            } //濃度場の変域補正
            if (cbh[i][j] >= 1.0)
            {
                cbh[i][j] = 1.0;
            }
            if (cbh[i][j] <= 0.0)
            {
                cbh[i][j] = 0.0;
            }
        }
    }

    //**** 各差分プロックにおけるn00h[i][j]とm00h[n00][i][j]を調査 *********************
    for (i = 0; i <= ndm; i++)
    {
        for (j = 0; j <= ndm; j++)
        {
            ip = i + 1;
            im = i - 1;
            jp = j + 1;
            jm = j - 1;
            if (i == ndm)
            {
                ip = 0;
            }
            if (i == 0)
            {
                im = ndm;
            } //周期的境界条件
            if (j == ndm)
            {
                jp = 0;
            }
            if (j == 0)
            {
                jm = ndm;
            }

            //--- 位置(i,j)およびその周囲(i±1,j±1)において、pが０ではない方位の個数---
            n00 = 0;
            for (ii = 1; ii <= nm; ii++)
            {
                if ((ph[ii][i][j] > 0.0) ||
                    ((ph[ii][i][j] == 0.0) && (ph[ii][ip][j] > 0.0) ||
                     (ph[ii][im][j] > 0.0) ||
                     (ph[ii][i][jp] > 0.0) ||
                     (ph[ii][i][jm] > 0.0)))
                {
                    n00++;
                    m00h[n00][i][j] = ii;
                    // printf("%d  ", n00);
                }
            }
            n00h[i][j] = n00;
            //--------------------------------------------------------------------------
        }
    }

    //***** フェーズフィールドの発展方程式の計算 **********************************
    for (i = 0; i <= ndm; i++)
    {
        for (j = 0; j <= ndm; j++)
        {
            ip = i + 1;
            im = i - 1;
            jp = j + 1;
            jm = j - 1;
            if (i == ndm)
            {
                ip = 0;
            }
            if (i == 0)
            {
                im = ndm;
            } //周期的境界条件
            if (j == ndm)
            {
                jp = 0;
            }
            if (j == 0)
            {
                jm = ndm;
            }

            for (n1 = 1; n1 <= n00h[i][j]; n1++)
            {
                ii = m00h[n1][i][j];
                pddtt = 0.0;
                for (n2 = 1; n2 <= n00h[i][j]; n2++)
                {
                    jj = m00h[n2][i][j];
                    sum1 = 0.0;
                    for (n3 = 1; n3 <= n00h[i][j]; n3++)
                    {
                        kk = m00h[n3][i][j];
                        sum1 += 0.5 * (aij[ii][kk] - aij[jj][kk]) * (ph[kk][ip][j] + ph[kk][im][j] + ph[kk][i][jp] + ph[kk][i][jm] - 4.0 * ph[kk][i][j]) + (wij[ii][kk] - wij[jj][kk]) * ph[kk][i][j]; //[式(4.41)の一部]
                    }

                    if (ii <= nalph)
                    {
                        gii = A_alph * (cah[i][j] - c_alph0) * (cah[i][j] - c_alph0);
                        cii = cah[i][j];
                    }
                    else
                    {
                        gii = A_beta * (cbh[i][j] - c_beta0) * (cbh[i][j] - c_beta0);
                        cii = cbh[i][j];
                    } //式(4.43)
                    if (jj <= nalph)
                    {
                        gjj = A_alph * (cah[i][j] - c_alph0) * (cah[i][j] - c_alph0);
                        cjj = cah[i][j];
                    }
                    else
                    {
                        gjj = A_beta * (cbh[i][j] - c_beta0) * (cbh[i][j] - c_beta0);
                        cjj = cbh[i][j];
                    }                                            //式(4.43)
                    dgdc = 2.0 * A_alph * (cah[i][j] - c_alph0); //化学的自由エネルギーの濃度微分[式(4.48)]の計算
                                                                 // dgdc=2.0*A_beta*(cbh[i][j]-c_beta0);

                    pddtt += -2.0 * tij[ii][jj] / double(n00h[i][j]) * (sum1 + gii - gjj - (cii - cjj) * dgdc);
                    //フェーズフィールドの発展方程式[式(4.41)]
                }
                ph2[ii][i][j] = ph[ii][i][j] + pddtt * delt; //フェーズフィールドの時間発展（陽解法）
                if (ph2[ii][i][j] >= 1.0)
                {
                    ph2[ii][i][j] = 1.0;
                } //フェーズフィールドの変域補正
                if (ph2[ii][i][j] <= 0.0)
                {
                    ph2[ii][i][j] = 0.0;
                }
            }
        } // j
    }     // i

    //*****  濃度場の時間発展の計算（拡散方程式）**********************************
    for (i = 0; i <= ndm; i++)
    {
        for (j = 0; j <= ndm; j++)
        {
            ip = i + 1;
            im = i - 1;
            jp = j + 1;
            jm = j - 1;
            if (i == ndm)
            {
                ip = 0;
            }
            if (i == 0)
            {
                im = ndm;
            } //周期的境界条件
            if (j == ndm)
            {
                jp = 0;
            }
            if (j == 0)
            {
                jm = ndm;
            }

            //拡散方程式内における微分計算
            dev1_a = 0.25 * ((sah[ip][j] - sah[im][j]) * (cah[ip][j] - cah[im][j]) + (sah[i][jp] - sah[i][jm]) * (cah[i][jp] - cah[i][jm]));
            dev1_b = 0.25 * ((sbh[ip][j] - sbh[im][j]) * (cbh[ip][j] - cbh[im][j]) + (sbh[i][jp] - sbh[i][jm]) * (cbh[i][jp] - cbh[i][jm]));
            dev2_a = sah[i][j] * (cah[ip][j] + cah[im][j] + cah[i][jp] + cah[i][jm] - 4.0 * cah[i][j]);
            dev2_b = sbh[i][j] * (cbh[ip][j] + cbh[im][j] + cbh[i][jp] + cbh[i][jm] - 4.0 * cbh[i][j]);

            cddtt = Da * (dev1_a + dev2_a) + Db * (dev1_b + dev2_b); //拡散方程式[式(4.42)]
            // ch2[i][j]=ch[i][j]+cddtt*delt;	//濃度場の時間発展(陽解法)
            ch2[i][j] = ch[i][j] + cddtt * delt + (2. * DRND(1.) - 1.) * 0.001; //濃度場の時間発展(陽解法)
        }
    }

    for (i = 0; i <= ndm; i++)
    {
        for (j = 0; j <= ndm; j++)
        {
            for (k = 1; k <= nm; k++)
            {
                ph[k][i][j] = ph2[k][i][j]; //補助配列を主配列に移動（フェーズフィールド）
            }
            ch[i][j] = ch2[i][j]; //補助配列を主配列に移動（濃度場）
        }
    }

    //*** フェーズフィールドの規格化補正 ***********************************************
    for (i = 0; i <= ndm; i++)
    {
        for (j = 0; j <= ndm; j++)
        {
            sum1 = 0.0;
            for (k = 1; k <= nm; k++)
            {
                sum1 += ph[k][i][j];
            }
            for (k = 1; k <= nm; k++)
            {
                ph[k][i][j] = ph[k][i][j] / sum1;
            }
        }
    }

    //*** 濃度場の収支補正 *************************************************************
    sum1 = 0.0;
    for (i = 0; i <= ndm; i++)
    {
        for (j = 0; j <= ndm; j++)
        {
            sum1 += ch[i][j];
        }
    }
    dc0 = sum1 / nd / nd - c0;
    for (i = 0; i <= ndm; i++)
    {
        for (j = 0; j <= ndm; j++)
        {
            ch[i][j] = ch[i][j] - dc0;
            if (ch[i][j] > 1.0)
            {
                ch[i][j] = 1.0;
            }
            if (ch[i][j] < 0.0)
            {
                ch[i][j] = 0.0;
            }
        }
    }

    //*********************************************************************
    if (keypress())
    {
        return 0;
    } //キー待ち状態
    time1 = time1 + 1.;
    if (time1 < time1max)
    {
        goto start;
    } //最大カウント数に到達したかどうかの判断

end:;
    return 0;
}

//************ 初期場(フェーズフィールドと濃度場)の設定サブルーチン *************
void ini000()
{
    int i, j, k, l, it;                       //整数
    int ii, jj, kk;                           //整数
    int ip, im, jp, jm;                       //整数
    int igx, igy, ixmin, ixmax, iymin, iymax; //差分ブロック座標系の設定
    double x, y, xmin, xmax, ymin, ymax;      //規格化座標系の設定
    double sum1, sum2, t, r0, phi, r;         //作業変数
                                              // srand(time(NULL)); //乱数初期化

    for (i = 0; i <= ndm; i++)
    {
        for (j = 0; j <= ndm; j++)
        {
            ch[i][j] = 0.5; //α相の濃度場（過飽和固溶体）を設定
        }
    }

    datin(); //α相の結晶組織データを読み込み

    xmin = -1.0;
    xmax = 1.0;
    ymin = -1.0;
    ymax = 1.0; //規格化座標系
    ixmin = 0;
    ixmax = ND;
    iymin = 0;
    iymax = ND; //差分ブロック座標系

    r0 = 2.0; //β相のサイズ

    //以下、α相の粒界の３重点（６箇所）にβ相の核を置く
    x = 0.5;
    igx = (ixmax - ixmin) / (xmax - xmin) * (x - xmin) + ixmin;
    y = 0.5 / sqrt(3.);
    igy = (iymax - iymin) / (ymax - ymin) * (y - ymin) + iymin;
    for (i = 0; i <= ndm; i++)
    {
        for (j = 0; j <= ndm; j++)
        {
            r = sqrt((double(i - igx)) * (double(i - igx)) + (double(j - igy)) * (double(j - igy)));
            if (r <= r0)
            {
                ph[nm][i][j] = 1.0;
                for (k = 1; j <= nm - 1; k++)
                {
                    ph[k][i][j] = 0.0;
                }
                ch[i][j] = 0.9;
            }
        }
    }

    x = -0.5;
    igx = (ixmax - ixmin) / (xmax - xmin) * (x - xmin) + ixmin;
    y = 0.5 / sqrt(3.);
    igy = (iymax - iymin) / (ymax - ymin) * (y - ymin) + iymin;
    for (i = 0; i <= ndm; i++)
    {
        for (j = 0; j <= ndm; j++)
        {
            r = sqrt((double(i - igx)) * (double(i - igx)) + (double(j - igy)) * (double(j - igy)));
            if (r <= r0)
            {
                ph[nm][i][j] = 1.0;
                for (k = 1; j <= nm - 1; k++)
                {
                    ph[k][i][j] = 0.0;
                }
                ch[i][j] = 0.9;
            }
        }
    }

    x = 0.5;
    igx = (ixmax - ixmin) / (xmax - xmin) * (x - xmin) + ixmin;
    y = -0.5 / sqrt(3.);
    igy = (iymax - iymin) / (ymax - ymin) * (y - ymin) + iymin;
    for (i = 0; i <= ndm; i++)
    {
        for (j = 0; j <= ndm; j++)
        {
            r = sqrt((double(i - igx)) * (double(i - igx)) + (double(j - igy)) * (double(j - igy)));
            if (r <= r0)
            {
                ph[nm][i][j] = 1.0;
                for (k = 1; j <= nm - 1; k++)
                {
                    ph[k][i][j] = 0.0;
                }
                ch[i][j] = 0.9;
            }
        }
    }

    x = -0.5;
    igx = (ixmax - ixmin) / (xmax - xmin) * (x - xmin) + ixmin;
    y = -0.5 / sqrt(3.);
    igy = (iymax - iymin) / (ymax - ymin) * (y - ymin) + iymin;
    for (i = 0; i <= ndm; i++)
    {
        for (j = 0; j <= ndm; j++)
        {
            r = sqrt((double(i - igx)) * (double(i - igx)) + (double(j - igy)) * (double(j - igy)));
            if (r <= r0)
            {
                ph[nm][i][j] = 1.0;
                for (k = 1; j <= nm - 1; k++)
                {
                    ph[k][i][j] = 0.0;
                }
                ch[i][j] = 0.9;
            }
        }
    }

    x = 0.0;
    igx = (ixmax - ixmin) / (xmax - xmin) * (x - xmin) + ixmin;
    y = 1. / sqrt(3.);
    igy = (iymax - iymin) / (ymax - ymin) * (y - ymin) + iymin;
    for (i = 0; i <= ndm; i++)
    {
        for (j = 0; j <= ndm; j++)
        {
            r = sqrt((double(i - igx)) * (double(i - igx)) + (double(j - igy)) * (double(j - igy)));
            if (r <= r0)
            {
                ph[nm][i][j] = 1.0;
                for (k = 1; j <= nm - 1; k++)
                {
                    ph[k][i][j] = 0.0;
                }
                ch[i][j] = 0.9;
            }
        }
    }

    x = 0.0;
    igx = (ixmax - ixmin) / (xmax - xmin) * (x - xmin) + ixmin;
    y = -1. / sqrt(3.);
    igy = (iymax - iymin) / (ymax - ymin) * (y - ymin) + iymin;
    for (i = 0; i <= ndm; i++)
    {
        for (j = 0; j <= ndm; j++)
        {
            r = sqrt((double(i - igx)) * (double(i - igx)) + (double(j - igy)) * (double(j - igy)));
            if (r <= r0)
            {
                ph[nm][i][j] = 1.0;
                for (k = 1; j <= nm - 1; k++)
                {
                    ph[k][i][j] = 0.0;
                }
                ch[i][j] = 0.9;
            }
        }
    }

    //--- フェーズフィールドの規格化補正と平均組成の算出 ------------------------
    sum2 = 0.0;
    for (i = 0; i <= ndm; i++)
    {
        for (j = 0; j <= ndm; j++)
        {
            sum1 = 0.0;
            for (k = 1; k <= nm; k++)
            {
                sum1 += ph[k][i][j];
            }
            for (k = 1; k <= nm; k++)
            {
                ph[k][i][j] = ph[k][i][j] / sum1;
            }
            sum2 += ch[i][j];
        }
    }
    c0 = sum2 / nd / nd;
}

//******* フェーズフィールドの描画サブルーチン ***************************************
void graph_a()
{
    int i, j, k, ii, jj;                          //整数
    double col, col_R, col_G, col_B;              //色
    int ixmin = 0, iymin = 0, igx, igy, irad0;    //スクリーン座標系の設定
    int ixmax = INXY, iymax = INXY;               //描画Window範囲
    double c, x, xmax, xmin, y, ymax, ymin, rad0; //規格化座標系の設定

    // gcls();//画面クリア
    xmin = 0.;
    xmax = 1.;
    ymin = 0.;
    ymax = 1.;                  //描画領域（規格化されている）
    printf("time %f\n", time1); //計算カウント数の表示
    rad0 = 1. / nd / 2.;
    irad0 = (ixmax - ixmin) / (xmax - xmin) * rad0 + 1;
    //差分ブロックの半分の長さ	//スクリーン座標系に変換（+1は整数化時の切捨て補正）

    for (i = 0; i <= nd; i++)
    {
        for (j = 0; j <= nd; j++)
        {
            x = 1. / nd * i + rad0;
            igx = (ixmax - ixmin) / (xmax - xmin) * (x - xmin) + ixmin;
            y = 1. / nd * j + rad0;
            igy = (iymax - iymin) / (ymax - ymin) * (y - ymin) + iymin;
            //座標計算				//スクリーン座標系に変換
            ii = i;
            jj = j;
            if (i == nd)
            {
                ii = 0;
            }
            if (j == nd)
            {
                jj = 0;
            } //周期的境界条件
            col = 0.;
            for (k = 1; k <= nm - 1; k++)
            {
                col += ph[k][ii][jj] * ph[k][ii][jj];
            } //Σp^2を計算
            // col=0.; for(k=1;k<=nm;k++){ col+=ph[k][ii][jj]*ph[k][ii][jj]; }
            col_R = col_G = col_B = col; //フェーズフィールドを明暗にて設定
            // if(ph[nm][ii][jj]>0.5){col_R=0.; col_G=0.; col_B=1.;}
            // if(ph[0][ii][jj]>0.5){col_R=1.; col_G=0.; col_B=0.;}
            gcolor((int)(255 * col_R), (int)(255 * col_G), (int)(255 * col_B)); //色設定
            grect(igx - irad0, igy - irad0, igx + irad0, igy + irad0);          //中塗り四角形の描画
        }
    }
    swapbuffers(); //画面スワップ
}

//******* 濃度場の描画サブルーチン ***************************************
void graph_c()
{
    int i, j, ii, jj;                                   //整数
    double col;                                         //色
    int ixmin = 0, iymin = 0, igx, igy, irad0;          //スクリーン座標系の設定
    int ixmax = INXY, iymax = INXY;                     //描画Window範囲
    double c, x, xmax, xmin, y, ymax, ymin, rad0, dia0; //規格化座標系の設定

    // gcls(); //画面クリア
    xmin = 0.;
    xmax = 1.;
    ymin = 0.;
    ymax = 1.;                  //描画領域（規格化されている）
    printf("time %f\n", time1); //計算カウント数の表示
    dia0 = 1. / nd;
    rad0 = dia0 / 2.;
    irad0 = (ixmax - ixmin) / (xmax - xmin) * rad0 + 1;
    //差分ブロックの半分の長さ	 //スクリーン座標系に変換（+1は整数化時の切捨て補正）

    for (i = 0; i <= nd; i++)
    {
        for (j = 0; j <= nd; j++)
        {
            x = rad0 + dia0 * i;
            igx = (ixmax - ixmin) / (xmax - xmin) * (x - xmin) + ixmin;
            y = rad0 + dia0 * j;
            igy = (iymax - iymin) / (ymax - ymin) * (y - ymin) + iymin;
            //座標計算			//スクリーン座標系に変換
            ii = i;
            jj = j;
            if (i == nd)
            {
                ii = 0;
            }
            if (j == nd)
            {
                jj = 0;
            }                      //周期的境界条件
            col = 1. - ch[ii][jj]; //濃度場を明暗にて設定
            // col=(ch[ii][jj]-cc1)/(cc2-cc1);	//２相の平衡組成で濃度場を規格化
            if (col >= 1.)
            {
                col = 1.;
            }
            if (col <= 0.)
            {
                col = 0.;
            }
            gcolor((int)(255 * col), (int)(255 * col), (int)(255 * col)); //色設定
            grect(igx - irad0, igy - irad0, igx + irad0, igy + irad0);    //中塗り四角形の描画
        }
    }
    swapbuffers(); //画面スワップ
}

//************ データ保存サブルーチン *******************************
void datsave()
{
    FILE *stream; //ストリームのポインタ設定
    int i, j, k;  //整数
    double col;

    stream = fopen("test.dat", "a");  //書き込む先のファイルを追記方式でオープン
    fprintf(stream, "%e  \n", time1); //計算カウント数の保存
    for (i = 0; i <= ndm; i++)
    {
        for (j = 0; j <= ndm; j++)
        {
            for (k = 0; k <= nm; k++)
            {
                fprintf(stream, "%e   ", ph[k][i][j]); //フェーズフィールドの保存
            }
            fprintf(stream, "%e   ", ch[i][j]); //濃度場の保存
        }
    }
    fprintf(stream, "\n"); //改行の書き込み
    fclose(stream);        //ファイルをクローズ
}

//*********** データ入力サブルーチン **************************
void datin()
{
    FILE *datin0; //ストリームのポインタ設定
    int i, j, k;  //整数
    double dami1; //作業変数

    datin0 = fopen("MPF.ini", "r"); //読み込み元のファイルをオープン
    fscanf(datin0, "%lf  ", &dami1);
    for (i = 0; i <= ndm; i++)
    {
        for (j = 0; j <= ndm; j++)
        {
            for (k = 1; k <= nm; k++)
            {
                fscanf(datin0, "%lf  ", &ph[k][i][j]); //フェーズフィールドの読み込み
            }
        }
    }
    fclose(datin0); //ファイルをクローズ
}
