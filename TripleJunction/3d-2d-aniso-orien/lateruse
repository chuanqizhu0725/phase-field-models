// double theta, theta0, thetax, thetay;
// double thetaipj, thetaimj, thetaijp, thetaijm;
// double epipj, epimj, epijp, epijm;
// double ep1pipj, ep1pimj, ep1pijp, ep1pijm;

// thetax = (phidxy * phidx - phidxx * phidy) / (phidx * phidx + phidy * phidy);
// thetay = (phidyy * phidx - phidxy * phidy) / (phidx * phidx + phidy * phidy);

// thetaipj = calcTheta((phi[kk][ip][jp] - phi[kk][ip][jm]) / 2.0, (phi[kk][ipp][j] - phi[kk][i][j]) / 2.0);
// thetaimj = calcTheta((phi[kk][im][jp] - phi[kk][im][jm]) / 2.0, (phi[kk][i][j] - phi[kk][imm][j]) / 2.0);
// thetaijp = calcTheta((phi[kk][i][jpp] - phi[kk][i][j]) / 2.0, (phi[kk][ip][jp] - phi[kk][im][jp]) / 2.0);
// thetaijm = calcTheta((phi[kk][i][j] - phi[kk][i][jmm]) / 2.0, (phi[kk][ip][jm] - phi[kk][im][jm]) / 2.0);

// epipj = epsilon0 * (1.0 + astre * cos(4.0 * (thetaipj - theta0)));
// epimj = epsilon0 * (1.0 + astre * cos(4.0 * (thetaimj - theta0)));
// epijp = epsilon0 * (1.0 + astre * cos(4.0 * (thetaijp - theta0)));
// epijm = epsilon0 * (1.0 + astre * cos(4.0 * (thetaijm - theta0)));

// ep1pipj = -epsilon0 * astre * 4.0 * sin(4.0 * (thetaipj - theta0));
// ep1pimj = -epsilon0 * astre * 4.0 * sin(4.0 * (thetaimj - theta0));
// ep1pijp = -epsilon0 * astre * 4.0 * sin(4.0 * (thetaijp - theta0));
// ep1pijm = -epsilon0 * astre * 4.0 * sin(4.0 * (thetaijm - theta0));

// termiikk = ep * ep * (phidxx + phidyy) + 2.0 * ep * ep1p * (phidx * thetax + phidy * thetay) - (epipj * ep1pipj - epimj * ep1pimj) / 2.0 * phidy + (epijp * ep1pijp - epijm * ep1pijm) / 2.0 * phidx;